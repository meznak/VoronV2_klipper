####################################################################
#  Probe
#####################################################################

[probe]
## Klicky Probe
## This probe is not used for Z height, only Quad Gantry Leveling and
## auto_z 
pin: Z_MAX
x_offset: 0
y_offset: 19.75
z_offset: 6.42
speed: 4
lift_speed: 15
samples: 3
samples_result: median
sample_retract_dist: 1.5
#samples_tolerance: 0.005
samples_tolerance_retries: 1
drop_first_result: true

[quad_gantry_level]
gantry_corners:
   -60,-10
   410,420
points:
   50,25
   50,275
   300,275
   300,25
speed: 1000
horizontal_move_z: 15
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

[z_calibration]
#   The X and Y coordinates (in mm) for clicking the nozzle on the Z endstop
probe_nozzle_x: 226 
probe_nozzle_y: 350

#   The X and Y coordinates (in mm) for clicking the probe's switch on the Z endstop
probe_switch_x: 223
probe_switch_y: 328

# position on bed for print surface probing
#probe_bed_x: default from relative_reference_index of bed_mesh
#probe_bed_y: default from relative_reference_index of bed_mesh
switch_offset: 0.470 # 0.670 ; smaller is more away from bed!
max_deviation: 0.8
speed: 300
clearance: 10 #5
#samples: 5
#samples_tolerance: 0.01 #0.006
#samples_tolerance_retries: 10
#samples_result: median
#position_min: -5
#lift_speed: 5 #8
#probing_speed: 7 #10
probing_second_speed: 5
probing_retract_dist: 2
probing_first_fast: true


#####################################################################
#  Menu
#####################################################################
[menu __main __control __qgl]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: QGL
index: 3
gcode: QUAD_GANTRY_LEVEL


#####################################################################
#  Macros
#####################################################################
## customize QUAD GANTRY LEVEL gcode
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: BASE_QUAD_GANTRY_LEVEL
variable_qgl_done: 'false'
variable_qgl_run: 'false'
gcode:
  SET_GCODE_VARIABLE MACRO=QUAD_GANTRY_LEVEL VARIABLE=qgl_run VALUE='"true"'
  SMARTHOME

  CheckProbe action=query
  Attach_Probe

  _SET_Z_CURRENT VAL='HOME'
  BASE_QUAD_GANTRY_LEVEL {% for p in params
     %}{'%s=%s ' % (p, params[p])}{%
    endfor %}

  G28 Z
  _SET_Z_CURRENT

  Dock_Probe
  SET_GCODE_VARIABLE MACRO=QUAD_GANTRY_LEVEL VARIABLE=qgl_done VALUE='"true"'
  SET_GCODE_VARIABLE MACRO=QUAD_GANTRY_LEVEL VARIABLE=qgl_run VALUE='"false"'

[delayed_gcode _CHECK_QGL]
gcode:
  # check that QGL ended with no error
  {% if printer["gcode_macro QUAD_GANTRY_LEVEL"].qgl_done == 'false' %}
    # stop print if QGL stopped with failuare
    {action_respond_info("CANCEL PRINT BECAUSE OF QGL ERROR")}
    CANCEL_PRINT
    _LCD_KNOB COLOR=RED BLINK=0.2
    G0 Z30 F1800
    G0 X175 Y175 F18000
  {% endif %}

[gcode_macro QGL]
gcode:
   QUAD_GANTRY_LEVEL

[gcode_macro SMARTQGL]
gcode:
  {% if printer["gcode_macro QUAD_GANTRY_LEVEL"].qgl_done == 'false' %}
      QUAD_GANTRY_LEVEL
  {% endif %}

## G-Code M18: Disable all stepper motors
[gcode_macro M18]
rename_existing: M0018
gcode:
  M0018
  SET_GCODE_VARIABLE MACRO=QUAD_GANTRY_LEVEL VARIABLE=qgl_done VALUE='"false"'

## G-Code M84: Stop idle hold
[gcode_macro M84]
rename_existing: M0084
gcode:
  M0084
  SET_GCODE_VARIABLE MACRO=QUAD_GANTRY_LEVEL VARIABLE=qgl_done VALUE='"false"'


# This macro was provided by discord user Garrettwp to whom i give my thanks for sharing it with me.
# I have tweaked it a lot.
#
# this macro is  based on the great Annex magprobe dockable probe macros "#Originally developed by Mental, modified for better use on K-series printers by RyanG and Trails"
# that macro can be found here https://github.com/Annex-Engineering/Annex-Engineering_Other_Printer_Mods/blob/master/All_Printers/Microswitch_Probe/Klipper_Macros/dockable_probe_macros.cfg
#
# by standing on the shoulders of giants, lets see if we can see further

[gcode_macro User_Variables]
variable_verbose:               True  # Enable verbose output
variable_travel_speed:          200   # how fast all other travel moves will be performed when running these macros
variable_dock_speed:            50    # how fast should the toolhead move when docking the probe for the final movement
variable_release_speed:         100    # how fast should the toolhead move to release the hold of the magnets after docking
variable_z_drop_speed:          20    # how fast the z will lower when moving to the z location to clear the probe
variable_home_z_height:         15    # Z when homing

#dock location
variable_docklocation_x:        275    # X Dock position
variable_docklocation_y:        350   # Y Dock position
variable_docklocation_z:        11    # Z dock position
variable_dockarmslenght:        30    # Dock arms lenght, toolhead movement necessary to clear the dock arms


# Do not modify below
gcode:
    {% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    {% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}

    # if docklocation_z is zero, use Home Z height for safety
    {% if docklocation_z == 0 %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=docklocation_z VALUE={ home_z_height }
    {% endif %}


[gcode_macro Probe_Variables]
variable_probe_attached:            False
variable_probe_state:               False
variable_probe_lock:                False
gcode:


[gcode_macro Homing_Variables]
default_parameter_reset:            0
gcode:
    {% set R  = params.RESET %}

    {% if R %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_lock VALUE={ False }
   {% endif %}

# Attach probe and lock it
[gcode_macro Attach_Probe_Lock]
gcode:
    Attach_Probe
    SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_lock VALUE={ True }


# Attach probe and lock it
[gcode_macro Dock_Probe_Unlock]
gcode:
    SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_lock VALUE={ False }
    Dock_Probe

# Attach Probe Routine
[gcode_macro Attach_Probe]
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro Probe_Variables"].probe_attached %}
    {% set L = printer["gcode_macro Probe_Variables"].probe_lock %}
    {% set V = printer["gcode_macro User_Variables"].verbose %}
    # Get Docking location
    {% set Dx = printer["gcode_macro User_Variables"].docklocation_x %}
    {% set Dy = printer["gcode_macro User_Variables"].docklocation_y %}
    {% set Dz = printer["gcode_macro User_Variables"].docklocation_z %}
    {% set Da = printer["gcode_macro User_Variables"].dockarmslenght %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    #Set speed
    {% set St = printer["gcode_macro User_Variables"].travel_speed * 60    %}

    #prior to saving actual position, check if its necessary to move to a safe Z
    #that has enought overhead for the attached probe
    {% if (printer.toolhead.position.z < Hzh) %}
        G1 Z{Hzh} F1200
    {% endif %}
    M400 # mandatory to save the new safe position
    #allows the docking position to be independent of the Z offset, necessary for bed mounted probes
    SAVE_GCODE_STATE name=_attachProbe
    SET_GCODE_OFFSET Z=0

    # if x and y are not homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }

    # If probe not attached and locked
    {% elif not P and not L %}
        {% if V %}
            { action_respond_info("Attaching Probe") }
        {% endif %}
        G90

        {% if (not 'z' in printer.toolhead.homed_axes) %}
            {% if V %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        {% if (printer.toolhead.position.z < Hzh) %}
            G1 Z{Hzh} F1200
        {% endif %}


        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} Z{Hzh} F{St}
        #lower to Z dock
        G1 Z{Dz} F600
        # pickup from Probe location
        G1 X{Dx} Y{Dy} F1800
        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} F6000
        #Go to Z safe distance
        G1 Z{Hzh} F600

        CheckProbe action=attach

    {% elif L %}
        {% if V %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe attached, do nothing
        CheckProbe action=query

    {% else %}
        {% if V %}
            { action_respond_info("Probe already attached!") }
        {% endif %}

        # Probe attached, do nothing
        CheckProbe action=query

    {% endif %}
    #reverts to the original Z offset
    RESTORE_GCODE_STATE name=_attachProbe


# Dock Probe Routine
[gcode_macro Dock_Probe]
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro Probe_Variables"].probe_attached %}
    {% set L = printer["gcode_macro Probe_Variables"].probe_lock %}
    {% set V = printer["gcode_macro User_Variables"].verbose %}
    # Get Docking location
    {% set Dx = printer["gcode_macro User_Variables"].docklocation_x %}
    {% set Dy = printer["gcode_macro User_Variables"].docklocation_y %}
    {% set Dz = printer["gcode_macro User_Variables"].docklocation_z %}
    {% set Da = printer["gcode_macro User_Variables"].dockarmslenght %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    # Set speed
    {% set St = printer["gcode_macro User_Variables"].travel_speed * 60    %}
    {% set Sd = printer["gcode_macro User_Variables"].dock_speed * 60    %}
    {% set Sr = printer["gcode_macro User_Variables"].release_speed * 60    %}
    {% set Sz = printer["gcode_macro User_Variables"].z_drop_speed * 60    %}

    M400 # mandatory to save the new safe position
    #allows the docking position to be independent of the Z offset, necessary for bed mounted probes
    SAVE_GCODE_STATE name=_dockProbe
    SET_GCODE_OFFSET Z=0

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }

    # If probe not attached and not locked
    {% elif P and not L %}
        {% if V %}
            { action_respond_info("Docking Probe") }
        {% endif %}
        G90

        {% if (printer.toolhead.position.z < Hzh) %}
            G1 Z{Hzh} F{Sz}
        {% endif %}

        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} Z{Hzh} F{St}
        #lower to Z dock
        G1 Z{Dz} F{Sz}
        # Drop Probe to Probe location
        G1 X{Dx} Y{Dy} F{Sd}
        # Probe decoupling
        G1 X{Dx|int - 40} Y{Dy} F{Sr}
        #Go to Z safe distance
        G1 X{Dx|int - 40} Y{Dy|int - 5} Z{Hzh} F{St}


        CheckProbe action=dock

    {% elif L %}
        {% if V %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe docked, do nothing
        CheckProbe action=query

    {% else %}
        {% if V %}
            { action_respond_info("Probe already docked!") }
        {% endif %}

        # Probe docked, do nothing
        CheckProbe action=query

    {% endif %}
    #reverts to the original Z offset
    RESTORE_GCODE_STATE name=_dockProbe


# Probe Calibrate
[gcode_macro PROBE_CALIBRATE]
rename_existing:             _PROBE_CALIBRATE
gcode:
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    {% set Sz = printer["gcode_macro User_Variables"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro User_Variables"].travel_speed %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    G1 Z{Hzh} F{Sz}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=_original_nozzle_location
    
    CheckProbe action=query
    Attach_Probe

    # Restore nozzle location to probe the right place
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}
    
    _PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    Dock_Probe

    # Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}


# Probe Accuracy
[gcode_macro PROBE_ACCURACY]
rename_existing:             _PROBE_ACCURACY
gcode:
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    {% set Sz = printer["gcode_macro User_Variables"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro User_Variables"].travel_speed %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    G1 Z{Hzh} F{Sz}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=_original_nozzle_location

    CheckProbe action=query
    Attach_Probe

    # Restore nozzle location to probe the right place
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}

    _PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    Dock_Probe

    # Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}


# check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro CheckProbe]
variable_probe_state:           0
default_parameter_action:
gcode:
    Query_Probe
    SetProbeState action={ ACTION }


# due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro SetProbeState]
default_parameter_action:
gcode:
    {% set P = printer.probe.last_query %}
    {% set V = printer["gcode_macro User_Variables"].verbose %}

    # If triggered (true), probe not attached
    {% if P %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_attached VALUE={ False }

    # If not triggered (false), probe attached
    {% else %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if params.ACTION == 'query' %}
          SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_state VALUE={ P }
    {% endif %}

    # if probe fails to attach/detach
    # if not docked
    {% if (not P and params.ACTION == 'dock') %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # if not attached
    {% if P and params.ACTION == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}

[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
  SMARTHOME
  CheckProbe action=query
  Attach_Probe_Lock
  _SET_Z_CURRENT VAL='HOME'
  SMARTQGL
  G28 Z
  BASE_CALIBRATE_Z
  _SET_Z_CURRENT
  Dock_Probe_Unlock
